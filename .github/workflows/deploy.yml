name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker images
        run: docker build -t commerce-app .

      - name: Save Docker image to a file
        run: docker save -o commerce-app.tar commerce-app

      - name: Copy Docker image and necessary files via SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa commerce-app.tar ec2-user@$EC2_HOST:/home/ec2-user/

      - name: Pull Git repository and deploy containers on EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@$EC2_HOST << 'EOF'
            set -e

            # Git 리포지토리 초기화 및 최신 코드 가져오기
            if [ -d "~/commerce" ]; then
              cd ~/commerce
              git pull
            else
              git clone https://github.com/choiseongho1/commerce.git ~/commerce
              cd ~/commerce
            fi

            # 빌드 디렉토리로 이동하여 Gradle 빌드
            cd ~/commerce
            chmod +x ./gradlew
            ./gradlew bootJar

            # Docker 이미지 로드
            docker load -i ~/commerce-app.tar
            
            echo "Stopping processes on port 8080..."
            sudo fuser -k 8080/tcp || true

            echo "Bringing down Docker Compose..."
            docker-compose down || true

            echo "Removing old containers..."
            docker rm -f $(docker ps -aq) || true

            echo "Removing unused Docker resources..."
            docker system prune -f --volumes || true

            echo "Starting Docker Compose..."
            docker-compose up -d

            echo "Deployment finished."
          EOF
